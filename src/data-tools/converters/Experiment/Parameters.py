# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Experiment

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Parameters(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsParameters(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Parameters()
        x.Init(buf, n + offset)
        return x

    # Parameters
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Parameters
    def Amplitude(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Parameters
    def AmplitudeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # Parameters
    def AmplitudeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Parameters
    def AmplitudeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Parameters
    def Defocus(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Parameters
    def DefocusAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # Parameters
    def DefocusLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Parameters
    def DefocusIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Parameters
    def BFactor(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Parameters
    def BFactorAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # Parameters
    def BFactorLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Parameters
    def BFactorIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Parameters
    def ImgDims(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Parameters
    def ImgDimsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # Parameters
    def ImgDimsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Parameters
    def ImgDimsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # Parameters
    def NumPixels(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Parameters
    def NumPixelsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # Parameters
    def NumPixelsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Parameters
    def NumPixelsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # Parameters
    def PixelWidth(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Parameters
    def PixelWidthAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # Parameters
    def PixelWidthLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Parameters
    def PixelWidthIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # Parameters
    def Sigma(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Parameters
    def SigmaAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # Parameters
    def SigmaLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Parameters
    def SigmaIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # Parameters
    def Elecwavel(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Parameters
    def ElecwavelAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # Parameters
    def ElecwavelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Parameters
    def ElecwavelIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # Parameters
    def Snr(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Parameters
    def SnrAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # Parameters
    def SnrLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Parameters
    def SnrIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # Parameters
    def ExperimentParameters(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Parameters
    def ExperimentParametersAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # Parameters
    def ExperimentParametersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Parameters
    def ExperimentParametersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # Parameters
    def Seed(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Parameters
    def SeedAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # Parameters
    def SeedLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Parameters
    def SeedIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # Parameters
    def Structures(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Parameters
    def StructuresAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # Parameters
    def StructuresLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Parameters
    def StructuresIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # Parameters
    def Coordinates(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Parameters
    def CoordinatesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # Parameters
    def CoordinatesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Parameters
    def CoordinatesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

def ParametersStart(builder): builder.StartObject(13)
def ParametersAddAmplitude(builder, amplitude): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(amplitude), 0)
def ParametersStartAmplitudeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ParametersAddDefocus(builder, defocus): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(defocus), 0)
def ParametersStartDefocusVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ParametersAddBFactor(builder, bFactor): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(bFactor), 0)
def ParametersStartBFactorVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ParametersAddImgDims(builder, imgDims): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(imgDims), 0)
def ParametersStartImgDimsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ParametersAddNumPixels(builder, numPixels): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(numPixels), 0)
def ParametersStartNumPixelsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ParametersAddPixelWidth(builder, pixelWidth): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(pixelWidth), 0)
def ParametersStartPixelWidthVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ParametersAddSigma(builder, sigma): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(sigma), 0)
def ParametersStartSigmaVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ParametersAddElecwavel(builder, elecwavel): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(elecwavel), 0)
def ParametersStartElecwavelVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ParametersAddSnr(builder, snr): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(snr), 0)
def ParametersStartSnrVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ParametersAddExperimentParameters(builder, experimentParameters): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(experimentParameters), 0)
def ParametersStartExperimentParametersVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ParametersAddSeed(builder, seed): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(seed), 0)
def ParametersStartSeedVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ParametersAddStructures(builder, structures): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(structures), 0)
def ParametersStartStructuresVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ParametersAddCoordinates(builder, coordinates): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(coordinates), 0)
def ParametersStartCoordinatesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ParametersEnd(builder): return builder.EndObject()

try:
    from typing import List
except:
    pass

class ParametersT(object):

    # ParametersT
    def __init__(self):
        self.amplitude = None  # type: List[float]
        self.defocus = None  # type: List[float]
        self.bFactor = None  # type: List[float]
        self.imgDims = None  # type: List[float]
        self.numPixels = None  # type: List[float]
        self.pixelWidth = None  # type: List[float]
        self.sigma = None  # type: List[float]
        self.elecwavel = None  # type: List[float]
        self.snr = None  # type: List[float]
        self.experimentParameters = None  # type: List[float]
        self.seed = None  # type: List[float]
        self.structures = None  # type: List[float]
        self.coordinates = None  # type: List[float]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        parameters = Parameters()
        parameters.Init(buf, pos)
        return cls.InitFromObj(parameters)

    @classmethod
    def InitFromObj(cls, parameters):
        x = ParametersT()
        x._UnPack(parameters)
        return x

    # ParametersT
    def _UnPack(self, parameters):
        if parameters is None:
            return
        if not parameters.AmplitudeIsNone():
            if np is None:
                self.amplitude = []
                for i in range(parameters.AmplitudeLength()):
                    self.amplitude.append(parameters.Amplitude(i))
            else:
                self.amplitude = parameters.AmplitudeAsNumpy()
        if not parameters.DefocusIsNone():
            if np is None:
                self.defocus = []
                for i in range(parameters.DefocusLength()):
                    self.defocus.append(parameters.Defocus(i))
            else:
                self.defocus = parameters.DefocusAsNumpy()
        if not parameters.BFactorIsNone():
            if np is None:
                self.bFactor = []
                for i in range(parameters.BFactorLength()):
                    self.bFactor.append(parameters.BFactor(i))
            else:
                self.bFactor = parameters.BFactorAsNumpy()
        if not parameters.ImgDimsIsNone():
            if np is None:
                self.imgDims = []
                for i in range(parameters.ImgDimsLength()):
                    self.imgDims.append(parameters.ImgDims(i))
            else:
                self.imgDims = parameters.ImgDimsAsNumpy()
        if not parameters.NumPixelsIsNone():
            if np is None:
                self.numPixels = []
                for i in range(parameters.NumPixelsLength()):
                    self.numPixels.append(parameters.NumPixels(i))
            else:
                self.numPixels = parameters.NumPixelsAsNumpy()
        if not parameters.PixelWidthIsNone():
            if np is None:
                self.pixelWidth = []
                for i in range(parameters.PixelWidthLength()):
                    self.pixelWidth.append(parameters.PixelWidth(i))
            else:
                self.pixelWidth = parameters.PixelWidthAsNumpy()
        if not parameters.SigmaIsNone():
            if np is None:
                self.sigma = []
                for i in range(parameters.SigmaLength()):
                    self.sigma.append(parameters.Sigma(i))
            else:
                self.sigma = parameters.SigmaAsNumpy()
        if not parameters.ElecwavelIsNone():
            if np is None:
                self.elecwavel = []
                for i in range(parameters.ElecwavelLength()):
                    self.elecwavel.append(parameters.Elecwavel(i))
            else:
                self.elecwavel = parameters.ElecwavelAsNumpy()
        if not parameters.SnrIsNone():
            if np is None:
                self.snr = []
                for i in range(parameters.SnrLength()):
                    self.snr.append(parameters.Snr(i))
            else:
                self.snr = parameters.SnrAsNumpy()
        if not parameters.ExperimentParametersIsNone():
            if np is None:
                self.experimentParameters = []
                for i in range(parameters.ExperimentParametersLength()):
                    self.experimentParameters.append(parameters.ExperimentParameters(i))
            else:
                self.experimentParameters = parameters.ExperimentParametersAsNumpy()
        if not parameters.SeedIsNone():
            if np is None:
                self.seed = []
                for i in range(parameters.SeedLength()):
                    self.seed.append(parameters.Seed(i))
            else:
                self.seed = parameters.SeedAsNumpy()
        if not parameters.StructuresIsNone():
            if np is None:
                self.structures = []
                for i in range(parameters.StructuresLength()):
                    self.structures.append(parameters.Structures(i))
            else:
                self.structures = parameters.StructuresAsNumpy()
        if not parameters.CoordinatesIsNone():
            if np is None:
                self.coordinates = []
                for i in range(parameters.CoordinatesLength()):
                    self.coordinates.append(parameters.Coordinates(i))
            else:
                self.coordinates = parameters.CoordinatesAsNumpy()

    # ParametersT
    def Pack(self, builder):
        if self.amplitude is not None:
            if np is not None and type(self.amplitude) is np.ndarray:
                amplitude = builder.CreateNumpyVector(self.amplitude)
            else:
                ParametersStartAmplitudeVector(builder, len(self.amplitude))
                for i in reversed(range(len(self.amplitude))):
                    builder.PrependFloat32(self.amplitude[i])
                amplitude = builder.EndVector(len(self.amplitude))
        if self.defocus is not None:
            if np is not None and type(self.defocus) is np.ndarray:
                defocus = builder.CreateNumpyVector(self.defocus)
            else:
                ParametersStartDefocusVector(builder, len(self.defocus))
                for i in reversed(range(len(self.defocus))):
                    builder.PrependFloat32(self.defocus[i])
                defocus = builder.EndVector(len(self.defocus))
        if self.bFactor is not None:
            if np is not None and type(self.bFactor) is np.ndarray:
                bFactor = builder.CreateNumpyVector(self.bFactor)
            else:
                ParametersStartBFactorVector(builder, len(self.bFactor))
                for i in reversed(range(len(self.bFactor))):
                    builder.PrependFloat32(self.bFactor[i])
                bFactor = builder.EndVector(len(self.bFactor))
        if self.imgDims is not None:
            if np is not None and type(self.imgDims) is np.ndarray:
                imgDims = builder.CreateNumpyVector(self.imgDims)
            else:
                ParametersStartImgDimsVector(builder, len(self.imgDims))
                for i in reversed(range(len(self.imgDims))):
                    builder.PrependFloat32(self.imgDims[i])
                imgDims = builder.EndVector(len(self.imgDims))
        if self.numPixels is not None:
            if np is not None and type(self.numPixels) is np.ndarray:
                numPixels = builder.CreateNumpyVector(self.numPixels)
            else:
                ParametersStartNumPixelsVector(builder, len(self.numPixels))
                for i in reversed(range(len(self.numPixels))):
                    builder.PrependFloat32(self.numPixels[i])
                numPixels = builder.EndVector(len(self.numPixels))
        if self.pixelWidth is not None:
            if np is not None and type(self.pixelWidth) is np.ndarray:
                pixelWidth = builder.CreateNumpyVector(self.pixelWidth)
            else:
                ParametersStartPixelWidthVector(builder, len(self.pixelWidth))
                for i in reversed(range(len(self.pixelWidth))):
                    builder.PrependFloat32(self.pixelWidth[i])
                pixelWidth = builder.EndVector(len(self.pixelWidth))
        if self.sigma is not None:
            if np is not None and type(self.sigma) is np.ndarray:
                sigma = builder.CreateNumpyVector(self.sigma)
            else:
                ParametersStartSigmaVector(builder, len(self.sigma))
                for i in reversed(range(len(self.sigma))):
                    builder.PrependFloat32(self.sigma[i])
                sigma = builder.EndVector(len(self.sigma))
        if self.elecwavel is not None:
            if np is not None and type(self.elecwavel) is np.ndarray:
                elecwavel = builder.CreateNumpyVector(self.elecwavel)
            else:
                ParametersStartElecwavelVector(builder, len(self.elecwavel))
                for i in reversed(range(len(self.elecwavel))):
                    builder.PrependFloat32(self.elecwavel[i])
                elecwavel = builder.EndVector(len(self.elecwavel))
        if self.snr is not None:
            if np is not None and type(self.snr) is np.ndarray:
                snr = builder.CreateNumpyVector(self.snr)
            else:
                ParametersStartSnrVector(builder, len(self.snr))
                for i in reversed(range(len(self.snr))):
                    builder.PrependFloat32(self.snr[i])
                snr = builder.EndVector(len(self.snr))
        if self.experimentParameters is not None:
            if np is not None and type(self.experimentParameters) is np.ndarray:
                experimentParameters = builder.CreateNumpyVector(self.experimentParameters)
            else:
                ParametersStartExperimentParametersVector(builder, len(self.experimentParameters))
                for i in reversed(range(len(self.experimentParameters))):
                    builder.PrependFloat32(self.experimentParameters[i])
                experimentParameters = builder.EndVector(len(self.experimentParameters))
        if self.seed is not None:
            if np is not None and type(self.seed) is np.ndarray:
                seed = builder.CreateNumpyVector(self.seed)
            else:
                ParametersStartSeedVector(builder, len(self.seed))
                for i in reversed(range(len(self.seed))):
                    builder.PrependFloat32(self.seed[i])
                seed = builder.EndVector(len(self.seed))
        if self.structures is not None:
            if np is not None and type(self.structures) is np.ndarray:
                structures = builder.CreateNumpyVector(self.structures)
            else:
                ParametersStartStructuresVector(builder, len(self.structures))
                for i in reversed(range(len(self.structures))):
                    builder.PrependFloat32(self.structures[i])
                structures = builder.EndVector(len(self.structures))
        if self.coordinates is not None:
            if np is not None and type(self.coordinates) is np.ndarray:
                coordinates = builder.CreateNumpyVector(self.coordinates)
            else:
                ParametersStartCoordinatesVector(builder, len(self.coordinates))
                for i in reversed(range(len(self.coordinates))):
                    builder.PrependFloat32(self.coordinates[i])
                coordinates = builder.EndVector(len(self.coordinates))
        ParametersStart(builder)
        if self.amplitude is not None:
            ParametersAddAmplitude(builder, amplitude)
        if self.defocus is not None:
            ParametersAddDefocus(builder, defocus)
        if self.bFactor is not None:
            ParametersAddBFactor(builder, bFactor)
        if self.imgDims is not None:
            ParametersAddImgDims(builder, imgDims)
        if self.numPixels is not None:
            ParametersAddNumPixels(builder, numPixels)
        if self.pixelWidth is not None:
            ParametersAddPixelWidth(builder, pixelWidth)
        if self.sigma is not None:
            ParametersAddSigma(builder, sigma)
        if self.elecwavel is not None:
            ParametersAddElecwavel(builder, elecwavel)
        if self.snr is not None:
            ParametersAddSnr(builder, snr)
        if self.experimentParameters is not None:
            ParametersAddExperimentParameters(builder, experimentParameters)
        if self.seed is not None:
            ParametersAddSeed(builder, seed)
        if self.structures is not None:
            ParametersAddStructures(builder, structures)
        if self.coordinates is not None:
            ParametersAddCoordinates(builder, coordinates)
        parameters = ParametersEnd(builder)
        return parameters
