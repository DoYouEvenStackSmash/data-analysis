# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DataModel

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class DataSet(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAsDataSet(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DataSet()
        x.Init(buf, n + offset)
        return x

    # DataSet
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DataSet
    def Data(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from DataModel.Datum import Datum

            obj = Datum()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DataSet
    def DataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataSet
    def DataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # DataSet
    def Params(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from DataModel.Parameters import Parameters

            obj = Parameters()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None


def DataSetStart(builder):
    builder.StartObject(2)


def DataSetAddData(builder, data):
    builder.PrependUOffsetTRelativeSlot(
        0, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0
    )


def DataSetStartDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)


def DataSetAddParams(builder, params):
    builder.PrependUOffsetTRelativeSlot(
        1, flatbuffers.number_types.UOffsetTFlags.py_type(params), 0
    )


def DataSetEnd(builder):
    return builder.EndObject()


import DataModel.Datum
import DataModel.Parameters

try:
    from typing import List, Optional
except:
    pass


class DataSetT(object):
    # DataSetT
    def __init__(self):
        self.data = None  # type: List[DataModel.Datum.DatumT]
        self.params = None  # type: Optional[DataModel.Parameters.ParametersT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        dataSet = DataSet()
        dataSet.Init(buf, pos)
        return cls.InitFromObj(dataSet)

    @classmethod
    def InitFromObj(cls, dataSet):
        x = DataSetT()
        x._UnPack(dataSet)
        return x

    # DataSetT
    def _UnPack(self, dataSet):
        if dataSet is None:
            return
        if not dataSet.DataIsNone():
            self.data = []
            for i in range(dataSet.DataLength()):
                if dataSet.Data(i) is None:
                    self.data.append(None)
                else:
                    datum_ = DataModel.Datum.DatumT.InitFromObj(dataSet.Data(i))
                    self.data.append(datum_)
        if dataSet.Params() is not None:
            self.params = DataModel.Parameters.ParametersT.InitFromObj(dataSet.Params())

    # DataSetT
    def Pack(self, builder):
        if self.data is not None:
            datalist = []
            for i in range(len(self.data)):
                datalist.append(self.data[i].Pack(builder))
            DataSetStartDataVector(builder, len(self.data))
            for i in reversed(range(len(self.data))):
                builder.PrependUOffsetTRelative(datalist[i])
            data = builder.EndVector(len(self.data))
        if self.params is not None:
            params = self.params.Pack(builder)
        DataSetStart(builder)
        if self.data is not None:
            DataSetAddData(builder, data)
        if self.params is not None:
            DataSetAddParams(builder, params)
        dataSet = DataSetEnd(builder)
        return dataSet
